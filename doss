<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pyttsx3 Documentation | DOSS Day-4</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --text-color: #1f2937;
            --code-bg: #1e1e1e;
            --header-bg: #1e293b;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: #f8fafc;
        }

        header {
            background: var(--header-bg);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .version-badge {
            background: var(--primary-color);
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            margin-left: 1rem;
        }

        nav {
            position: fixed;
            top: 0;
            left: 0;
            width: 280px;
            height: 100vh;
            background: white;
            padding: 2rem;
            border-right: 1px solid #e5e7eb;
            overflow-y: auto;
        }
        #first {
            font-size: 50px;
        }
        nav ul {
            list-style: none;
        }

        nav ul li {
            margin: 0.5rem 0;
        }

        nav ul li a {
            color: var(--text-color);
            text-decoration: none;
            font-size: 0.95rem;
        }

        nav ul li a:hover {
            color: var(--primary-color);
        }

        main {
            margin-left: 280px;
            padding: 2rem;
            max-width: 1200px;
        }

        .section {
            margin: 2rem 0;
            padding: 1rem;
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        h1, h2, h3 {
            color: var(--header-bg);
            margin-bottom: 1rem;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
        }

        h2 {
            font-size: 1.75rem;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 0.5rem;
            margin-top: 2rem;
        }

        h3 {
            font-size: 1.25rem;
            margin-top: 1.5rem;
        }

        p {
            margin: 1rem 0;
        }

        pre {
            background: var(--code-bg);
            padding: 1rem;
            border-radius: 0.5rem;
            overflow-x: auto;
            margin: 1rem 0;
        }

        code {
            font-family: 'Fira Code', monospace;
            font-size: 0.9rem;
        }

        .info-box {
            background: #e0f2fe;
            border-left: 4px solid #fdfdfd;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 0.25rem;
        }

        .warning-box {
            background: #fef3c7;
            border-left: 4px solid #f59e0b;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 0.25rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        th, td {
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
            text-align: left;
        }

        th {
            background: #f8fafc;
        }

        .copy-button {
            position: relative;
            right: -63rem;
            top: -3.5rem;
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            font-size: 0.875rem;
        }

        .copy-button:hover {
            background: var(--secondary-color);
        }

        
        
       

        .code-container {
            position: relative;
        }

        @media (max-width: 768px) {
            nav {
                display: none;
            }
            main {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <nav>
        <ul>
            <li><a href="#introduction">Introduction</a></li>
            <li><a href="#installation">Installation</a></li>
            <li><a href="#basic-usage">Basic Usage</a></li>
            <li><a href="#advanced-features">Advanced Features</a></li>
            <li><a href="#KEY-POINTS">KEY-POINTS</a></li>
            <li><a href="#os-application">os-application</a></li>
            <li><a href="#troubleshooting">Troubleshooting</a></li>
        </ul>
    </nav>

    <header>
        <h1>Pyttsx3 Documentation</h1>
        <p id="first">DOSS Training Program - Day 4</p>
    </header>

    <main>
        <section id="introduction" class="section">
            <h1>Introduction</h1>
            <h3><p>Pyttsx3 is a powerful text-to-speech conversion library for Python that provides robust offline speech synthesis capabilities across multiple platforms.It provides a simple interface for text-to-speech (TTS) conversion.</p></h3>
            
            <div class="info-box">
                <strong>SOME EXAMPLES:</strong>
                <ul>
                    <li>Pip install pyttsx3</li>
                    <li>import pyttsx3</li>
                    <li>tts=pyttsx3 init</li>
                    <li>tts.say("I will speak")</li>
                    <li>tts.runAndwait</li>
                </ul>
            </div>
        </section>

        <section id="installation" class="section">
            <h2>Installation</h2>
            <h3>Basic Installation</h3>
            <div class="code-container">
                <pre><code class="language-bash">pip install pyttsx3</code></pre>
                <button class="copy-button">Copy</button>
            </div>
        <div>
            <pre><code class="language-bash">install OS</code></pre>
                <button class="copy-button">Copy</button>
        </div>

        <section id="basic-usage" class="section">
            <h2>Basic Usage</h2>
            <ul>
                <li><b>Intialization:</b> The engine must be initialized using pyttsx3.init().This sets up the text-tp-speech engine with platform-specific settings.</text-to-spee></li>
                <li><b>Voice-Customization:</b> You can customize the speech voice(male or female) using engine.get property().</li>
                <li><b>Speed and Volume Control:</b> You can control the speed (rate) and volume of the speech by engine.setProperty('rate',value).</li>
                <li><b>Execution and Cleanup:</b> Once the speech commands are queued,you need to invoke engine.runAndwait() to process the queue and deleiver the speech.</li>
                <li><b>Execution and Cleanup:</b> If you need to stop the speech immediately,use engine.stop().</li>
            </ul>
        </section>

        <section id="advanced-features" class="section">
            <h2>Advanced Features</h2>
            <ul>
                <li><b><i>Saving to file:</i></b>Export spoken text to an audio file.</li>
                <li><b><i>Speech event callbacks:</i></b> Listen for speech start,finish, or errors.</li>
                <li><b><i>Queue management:</i></b> Control multiple speech commands dynamically.</li>
                <li><b><i>Real-time adjustments:</i></b> Modify voice properties while speaking.</li>
                <li><b><i>Multilingual support:</i></b> Speak text in multiple languages.</li>
                <li><b><i>pronunciation control:</i></b>Adjust word pronunciations manually.</li>
                <li><b><i>Pausing and resuming:</i></b> Create natural breaks in speech.</li>
                <li><b><i>Logging:</i></b>Debug and monitor TTS processes.</li>

                <h3>These features allow pyttsx3 to be used in more complex and interactive text-to-speech applications that go beyond basic speech synthesis</h3>
            </ul>

        <section id="KEY-POINTS" class="section">
            <h2>KEY POINTS</h2>
            <ul>
                <li><b>Offline:</b>Works without an internet connection.</li>
                <li><b>Cross-Platform:</b> Functions on Windows.macOS,and Linux.</li>
                <li><b>Customizable:</b> You can adjust the voice,speech rate, and volume.</li>
            </ul>
        </section>
        
        <section id="os-application" class="section">
            <h2>Os Application</h2>
            <h3>Open Any Os Application Using Python </h3>
            <div class="code-container">
                <pre><code class="language-bash">pip install os-sys</code></pre>
            </div>
        <div>
            <pre><code class="language-bash">import OS</code></pre>
        </div>
        <div>
            <pre><code class="language-bash">os.System("Note Pad")</code></pre>
        </div>
            

        <section id="troubleshooting" class="section">
            <h2>Troubleshooting</h2>
            
            <div class="warning-box">
                <h3>Common Issues</h3>
                <ul>
                    <li><strong>No audio output:</strong> Check system volume and audio device connections</li>
                    <li><strong>Installation errors:</strong> Verify platform-specific dependencies</li>
                    <li><strong>Voice not found:</strong> Ensure proper voice installation</li>
                </ul>
            </div>
        </section>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-bash.min.js"></script>
    <script>
        // Add copy functionality to code blocks
        document.querySelectorAll('.copy-button').forEach(button => {
            button.addEventListener('click', () => {
                const codeBlock = button.previousElementSibling.querySelector('code');
                navigator.clipboard.writeText(codeBlock.textContent);
                button.textContent = 'Copied!';
                setTimeout(() => {
                    button.textContent = 'Copy';
                }, 2000);
            });
        });
    </script>
</body>
</html>
